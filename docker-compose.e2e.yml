services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file: .env
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4000'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:3000' || exit 1"
      interval: 5s
      timeout: 5s
      retries: 10

  images-upload:
    build:
      context: ./images-upload
      dockerfile: Dockerfile.dev
    volumes:
      - ./images-upload:/app
      - /app/node_modules
    ports:
      - "8000:8000"

  db:
    image: postgres
    env_file: .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    volumes:
      - redis_data:/data

  e2e:
    build: ./e2e
    volumes:
      - ./e2e:/app
      - /app/node_modules
      - ./e2e/playwright-report:/app/playwright-report
      - ./e2e/test-results:/app/test-results
    depends_on:
      frontend:
        condition: service_healthy
    environment:
      - PLAYWRIGHT_TEST_BASE_URL=http://frontend:3000

volumes:
  pgdata:
  redis_data:
